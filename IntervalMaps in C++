#include <map>
#include <limits>

template<typename K, typename V>
class interval_map 
{
	std::map<K,V> m_map;

public:
    // constructor associates whole range of K with val by inserting (K_min, val)
    // into the map
    interval_map( V const& val) {
        m_map.insert(m_map.end(),std::make_pair(std::numeric_limits<K>::lowest(),val));
    }

    // Assign value val to interval [keyBegin, keyEnd).
    // Overwrite previous values in this interval.
    // Conforming to the C++ Standard Library conventions, the interval
    // includes keyBegin, but excludes keyEnd.
    // If !( keyBegin < keyEnd ), this designates an empty interval,
    // and assign must do nothing.
    void assign( K const& keyBegin, K const& keyEnd, V const& val ) 
	{
		//basecheck!
		if(!(keyBegin < keyEnd))return;

		auto intervalbegin = keyBegin;
		auto intervalend = keyEnd;

		//get the range!
		auto int_begin = m_map.lower_bound(keyBegin);
		auto int_end = m_map.lower_bound(keyEnd);
		
		//cache for later use!
		auto startcache = std::prev(int_begin)->first;
		auto endcache = int_end->first;

		//delete existing
		m_map.erase(int_begin, int_end);
		
		//insert values
		typename std::map<K,V>::iterator itrbegin = m_map.find(startcache);
		typename std::map<K,V>::iterator itrend = m_map.find(endcache);
		
		while((itrbegin != itrend) || (intervalbegin < intervalend)){
			m_map.insert(std::pair<K,V>(intervalbegin, val));
			intervalbegin++;
			itrbegin++;
		}
    }

    // look-up of the value associated with key
    V const& operator[]( K const& key ) const {
        return ( --m_map.upper_bound(key) )->second;
    }
};
